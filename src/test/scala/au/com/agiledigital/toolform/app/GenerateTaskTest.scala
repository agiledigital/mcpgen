package au.com.agiledigital.toolform.app

import java.io.File

import au.com.agiledigital.toolform.version.BuildInfo
import org.scalatest.{FlatSpec, Matchers}

import scala.io.Source

class GenerateTaskTest extends FlatSpec with Matchers {

  val testFile = pathToFile("/test_project/environment.conf")

  def pathToFile(pathToFile: String): File = {
    val url  = getClass.getResource(pathToFile)
    val file = new File(url.toURI())
    file
  }

  "generate" should "generate a valid Docker Compose v3 file" in {
    val outputFile = File.createTempFile(getClass.getName, ".yaml")
    outputFile.deleteOnExit()
    ToolFormApp.execute(List("generate", "-i", testFile.getAbsolutePath, "-o", outputFile.getAbsolutePath).toArray)
    val result = Source.fromFile(outputFile.getAbsolutePath).mkString
    result should equal(s"""# Generated by ${BuildInfo.name} (${BuildInfo.version})
          |version: '3'
          |  services:
          |    HTTP Public API:
          |      image: se_swip/public_api
          |      restart: always
          |    SE Elastic Search:
          |      image: se_swip/se_swip_elastic_search
          |      restart: always
          |    SE Influx DB:
          |      image: se_swip/se_swip_influx_db
          |      restart: always
          |    SE Public Web Application:
          |      image: se_swip/client/public
          |      restart: always
          |    se_swip_carbon:
          |      image: se_swip/se_swip_carbon
          |      restart: always
          |    se_swip_mail_relay:
          |      image: se_swip/se_swip_mail_relay
          |      restart: always
          |    se_swip_db:
          |      image: se_swip/se_swip_db
          |      restart: always
          |""".stripMargin)
  }
}
