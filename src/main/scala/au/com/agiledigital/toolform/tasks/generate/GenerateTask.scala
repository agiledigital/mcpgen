package au.com.agiledigital.toolform.tasks.generate

import java.io.File

import au.com.agiledigital.toolform.app.{ToolFormConfiguration, ToolFormError}
import au.com.agiledigital.toolform.model.Project
import au.com.agiledigital.toolform.tasks.Task
import au.com.agiledigital.toolform.tasks.generate.docker.GenerateDockerComposeV3
import enumeratum.{Enum, EnumEntry}

class GenerateTask() extends Task with YamlWriter {

  override def run(toolFormConfiguration: ToolFormConfiguration, project: Project): Either[ToolFormError, String] =
    toolFormConfiguration.generateTaskConfiguration.generateTaskOutputType match {
      case GenerateTaskOutputType.dockerComposeV3 => new GenerateDockerComposeV3().runDockerComposeV3(toolFormConfiguration, project)
    }
}

/**
  * The configuration for the generate task.
  *
  * @param out                    The path to output the result of this task. For Docker Compose V3 this will be a single file.
  *                               For Kubernetes this will be a folder.
  * @param generateTaskOutputType The format of the file generated by the "Generate" task.
  */
final case class GenerateTaskConfiguration(out: File = new File("."), generateTaskOutputType: GenerateTaskOutputType = GenerateTaskOutputType.dockerComposeV3)

/**
  * An enumeration representing all the modes this tool can function in.
  */
sealed trait GenerateTaskOutputType extends EnumEntry

object GenerateTaskOutputType extends Enum[GenerateTaskOutputType] {
  val values = findValues

  case object dockerComposeV3 extends GenerateTaskOutputType
}
